(defun part1-parse-line (l)
  (labels ((parse-char (c)
	      (ecase c
		((#\A #\X) :rock)
		((#\B #\Y) :paper)
		((#\C #\Z) :scissors)
		)))
    (cons (parse-char (aref l 0)) (parse-char (aref l 2)))))

(defun part2-parse-line (l)
  (ecase (aref l 0)
    ((#\A) (cons :rock (ecase (aref l 2)
			 ((#\X) :scissors)
			 ((#\Y) :rock)
			 ((#\Z) :paper))))
    ((#\B) (cons :paper (ecase (aref l 2)
			 ((#\X) :rock)
			 ((#\Y) :paper)
			 ((#\Z) :scissors))))
    ((#\C) (cons :scissors (ecase (aref l 2)
			 ((#\X) :paper)
			 ((#\Y) :scissors)
			 ((#\Z) :rock))))
    ))

(defun points (g)
  (ecase (cdr g)
    ((:rock) (ecase (car g)
     ((:rock) (+ 3 1))
     ((:paper) (+ 0 1))
     ((:scissors) (+ 6 1))))
    ((:paper) (ecase (car g)
     ((:rock) (+ 6 2))
     ((:paper) (+ 3 2))
     ((:scissors) (+ 0 2))))
    ((:scissors) (ecase (car g)
     ((:rock) (+ 0 3))
     ((:paper) (+ 6 3))
     ((:scissors) (+ 3 3))))
    ))

(defun part1 (f)
  (loop for l in (uiop:read-file-lines f)
	sum (points (part1-parse-line l))))

(defun part2 (f)
  (loop for l in (uiop:read-file-lines f)
	sum (points (part2-parse-line l))))
